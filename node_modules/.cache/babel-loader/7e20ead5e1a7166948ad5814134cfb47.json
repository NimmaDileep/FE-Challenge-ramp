{"ast":null,"code":"var _s = $RefreshSig$();\n\n// import { useCallback, useState } from \"react\"\n// import { PaginatedRequestParams, PaginatedResponse, Transaction } from \"../utils/types\"\n// import { PaginatedTransactionsResult } from \"./types\"\n// import { useCustomFetch } from \"./useCustomFetch\"\n// export function usePaginatedTransactions(): PaginatedTransactionsResult {\n//   const { fetchWithCache, loading } = useCustomFetch()\n//   const [paginatedTransactions, setPaginatedTransactions] = useState<PaginatedResponse<\n//     Transaction[]\n//   > | null>(null)\n//   const [hasMore, setHasMore] = useState(true);\n//   const fetchAll = useCallback(async () => {\n//     if (!hasMore){\n//       return;\n//     }\n//     const response = await fetchWithCache<PaginatedResponse<Transaction[]>, PaginatedRequestParams>(\n//       \"paginatedTransactions\",\n//       {\n//         page: paginatedTransactions === null ? 0 : paginatedTransactions.nextPage,\n//       }\n//     )\n//     setPaginatedTransactions((previousResponse) => {\n//       if (response === null || previousResponse === null) {\n//         return response\n//       }\n//       const thereAreMore = response.data.length > 0;\n//       setHasMore(thereAreMore);\n//       // Append new transactions to the existing ones and update nextPage\n//       return {\n//         data: [...previousResponse.data, ...response.data],\n//         nextPage: response.nextPage\n//       }\n//     })\n//   }, [fetchWithCache, paginatedTransactions])\n//   const invalidateData = useCallback(() => {\n//     setPaginatedTransactions(null)\n//   }, [])\n//   return { data: paginatedTransactions, loading, fetchAll, invalidateData, hasMore}\n// }\nimport { useCallback, useState } from \"react\";\nimport { useCustomFetch } from \"./useCustomFetch\"; // Define your PaginatedTransactionsResult interface in your ./types.ts file to include hasMore\n\nexport function usePaginatedTransactions() {\n  _s();\n\n  const {\n    fetchWithCache,\n    loading\n  } = useCustomFetch(); // make sure 'loading' is included in 'fetchWithCache'\n\n  const [paginatedTransactions, setPaginatedTransactions] = useState(null);\n  const [hasMore, setHasMore] = useState(true);\n  const fetchAll = useCallback(async () => {\n    if (!hasMore) {\n      return;\n    }\n\n    const response = await fetchWithCache(\"paginatedTransactions\", {\n      page: paginatedTransactions === null ? 0 : paginatedTransactions.nextPage\n    });\n    setPaginatedTransactions(previousResponse => {\n      if (response === null || previousResponse === null) {\n        return response;\n      } // Check if there are more transactions\n\n\n      const thereAreMore = response.data.length > 0;\n      setHasMore(thereAreMore); // Append new transactions to the existing ones and update nextPage\n\n      return {\n        data: [...previousResponse.data, ...response.data],\n        nextPage: response.nextPage\n      };\n    });\n  }, [fetchWithCache, paginatedTransactions, hasMore]);\n  const invalidateData = useCallback(() => {\n    setPaginatedTransactions(null);\n    setHasMore(true);\n  }, []);\n  return {\n    data: paginatedTransactions,\n    loading,\n    fetchAll,\n    invalidateData,\n    hasMore\n  };\n}\n\n_s(usePaginatedTransactions, \"b8ZHAsi2n8t3HpZg6LUK1WvtzQo=\", false, function () {\n  return [useCustomFetch];\n});","map":{"version":3,"names":["useCallback","useState","useCustomFetch","usePaginatedTransactions","fetchWithCache","loading","paginatedTransactions","setPaginatedTransactions","hasMore","setHasMore","fetchAll","response","page","nextPage","previousResponse","thereAreMore","data","length","invalidateData"],"sources":["/Users/dileep/Desktop/ramp-fe-challenge/src/hooks/usePaginatedTransactions.ts"],"sourcesContent":["// import { useCallback, useState } from \"react\"\n// import { PaginatedRequestParams, PaginatedResponse, Transaction } from \"../utils/types\"\n// import { PaginatedTransactionsResult } from \"./types\"\n// import { useCustomFetch } from \"./useCustomFetch\"\n\n// export function usePaginatedTransactions(): PaginatedTransactionsResult {\n//   const { fetchWithCache, loading } = useCustomFetch()\n//   const [paginatedTransactions, setPaginatedTransactions] = useState<PaginatedResponse<\n//     Transaction[]\n//   > | null>(null)\n//   const [hasMore, setHasMore] = useState(true);\n\n//   const fetchAll = useCallback(async () => {\n\n//     if (!hasMore){\n//       return;\n//     }\n\n//     const response = await fetchWithCache<PaginatedResponse<Transaction[]>, PaginatedRequestParams>(\n//       \"paginatedTransactions\",\n//       {\n//         page: paginatedTransactions === null ? 0 : paginatedTransactions.nextPage,\n//       }\n//     )\n  \n//     setPaginatedTransactions((previousResponse) => {\n//       if (response === null || previousResponse === null) {\n//         return response\n//       }\n  \n//       const thereAreMore = response.data.length > 0;\n  \n//       setHasMore(thereAreMore);\n  \n//       // Append new transactions to the existing ones and update nextPage\n//       return {\n//         data: [...previousResponse.data, ...response.data],\n//         nextPage: response.nextPage\n//       }\n//     })\n//   }, [fetchWithCache, paginatedTransactions])\n  \n\n//   const invalidateData = useCallback(() => {\n//     setPaginatedTransactions(null)\n//   }, [])\n\n//   return { data: paginatedTransactions, loading, fetchAll, invalidateData, hasMore}\n// }\n\n\nimport { useCallback, useState } from \"react\"\nimport { PaginatedRequestParams, PaginatedResponse, Transaction } from \"../utils/types\"\nimport { useCustomFetch } from \"./useCustomFetch\"\n\n// Define your PaginatedTransactionsResult interface in your ./types.ts file to include hasMore\nexport interface PaginatedTransactionsResult {\n  data: PaginatedResponse<Transaction[]> | null;\n  loading: boolean;\n  fetchAll: () => void;\n  invalidateData: () => void;\n  hasMore: boolean;\n}\n\nexport function usePaginatedTransactions(): PaginatedTransactionsResult {\n  const { fetchWithCache, loading } = useCustomFetch() // make sure 'loading' is included in 'fetchWithCache'\n  const [paginatedTransactions, setPaginatedTransactions] = useState<PaginatedResponse<Transaction[]> | null>(null)\n  const [hasMore, setHasMore] = useState(true);\n\n  const fetchAll = useCallback(async () => {\n    if (!hasMore){\n      return;\n    }\n\n    const response = await fetchWithCache<PaginatedResponse<Transaction[]>, PaginatedRequestParams>(\n      \"paginatedTransactions\",\n      {\n        page: paginatedTransactions === null ? 0 : paginatedTransactions.nextPage,\n      }\n    )\n\n    setPaginatedTransactions((previousResponse) => {\n      if (response === null || previousResponse === null) {\n        return response\n      }\n\n      // Check if there are more transactions\n      const thereAreMore = response.data.length > 0;\n\n      setHasMore(thereAreMore);\n\n      // Append new transactions to the existing ones and update nextPage\n      return {\n        data: [...previousResponse.data, ...response.data],\n        nextPage: response.nextPage\n      }\n    })\n  }, [fetchWithCache, paginatedTransactions, hasMore])\n\n  const invalidateData = useCallback(() => {\n    setPaginatedTransactions(null)\n    setHasMore(true)\n  }, [])\n\n  return { data: paginatedTransactions, loading, fetchAll, invalidateData, hasMore }\n}\n"],"mappings":";;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AAGA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AAEA,SAASC,cAAT,QAA+B,kBAA/B,C,CAEA;;AASA,OAAO,SAASC,wBAAT,GAAiE;EAAA;;EACtE,MAAM;IAAEC,cAAF;IAAkBC;EAAlB,IAA8BH,cAAc,EAAlD,CADsE,CACjB;;EACrD,MAAM,CAACI,qBAAD,EAAwBC,wBAAxB,IAAoDN,QAAQ,CAA0C,IAA1C,CAAlE;EACA,MAAM,CAACO,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,CAAC,IAAD,CAAtC;EAEA,MAAMS,QAAQ,GAAGV,WAAW,CAAC,YAAY;IACvC,IAAI,CAACQ,OAAL,EAAa;MACX;IACD;;IAED,MAAMG,QAAQ,GAAG,MAAMP,cAAc,CACnC,uBADmC,EAEnC;MACEQ,IAAI,EAAEN,qBAAqB,KAAK,IAA1B,GAAiC,CAAjC,GAAqCA,qBAAqB,CAACO;IADnE,CAFmC,CAArC;IAOAN,wBAAwB,CAAEO,gBAAD,IAAsB;MAC7C,IAAIH,QAAQ,KAAK,IAAb,IAAqBG,gBAAgB,KAAK,IAA9C,EAAoD;QAClD,OAAOH,QAAP;MACD,CAH4C,CAK7C;;;MACA,MAAMI,YAAY,GAAGJ,QAAQ,CAACK,IAAT,CAAcC,MAAd,GAAuB,CAA5C;MAEAR,UAAU,CAACM,YAAD,CAAV,CAR6C,CAU7C;;MACA,OAAO;QACLC,IAAI,EAAE,CAAC,GAAGF,gBAAgB,CAACE,IAArB,EAA2B,GAAGL,QAAQ,CAACK,IAAvC,CADD;QAELH,QAAQ,EAAEF,QAAQ,CAACE;MAFd,CAAP;IAID,CAfuB,CAAxB;EAgBD,CA5B2B,EA4BzB,CAACT,cAAD,EAAiBE,qBAAjB,EAAwCE,OAAxC,CA5ByB,CAA5B;EA8BA,MAAMU,cAAc,GAAGlB,WAAW,CAAC,MAAM;IACvCO,wBAAwB,CAAC,IAAD,CAAxB;IACAE,UAAU,CAAC,IAAD,CAAV;EACD,CAHiC,EAG/B,EAH+B,CAAlC;EAKA,OAAO;IAAEO,IAAI,EAAEV,qBAAR;IAA+BD,OAA/B;IAAwCK,QAAxC;IAAkDQ,cAAlD;IAAkEV;EAAlE,CAAP;AACD;;GAzCeL,wB;UACsBD,c"},"metadata":{},"sourceType":"module"}